#Move a list of files, named by pattern, from source folder to dest folder
# $1 : source folder
# $2 : pattern
# $3 : destination folder
#
# Usage: move_files /source/folder *.log /dest/folder
function move_files() {
  ${1:=$SYSTEM_IMAGES_FOLDER}
  ${2:=$SCREENSHOT_NAME_PATTERN}
  ${3:=$SCREENSHOT_MV_TO}
  find $1 -name $2 -print0 | xargs -0 mv -t $3
}

# RSync a folder
# $1 : source folder
# $2 : dest folder
function rsync_folders(){
  ${1:=$SYSTEM_IMAGES_FOLDER}
  ${2:=$SCREENSHOT_MV_TO}
  # https://github.com/webpro/dotfiles has some optimizations for this command, take a look
  rsync -av --delete $1 $2
}

# Download a list of resources with wget, performing incremental substitution of
# parameter on the provided url
# $1 : start increment
# $2 : to increment
# $3 : url (use %d as placeholder for incremental substitution)
#
# Usage: wget_incremental 1 31 http://www.mysite.com/logs/2016-01-%d.txt
function wget_incremental() {
echo "Bash version ${BASH_VERSION}..."

local start=$(( ${1#0} +0 ))
local end=$(( ${2#0} +0 ))

echo "Looping from $start to $end..."

  for i in $(eval echo {$start..$end}) 
    do
      printf $3 $i 
      echo ''
    done
echo '---'
}

# Mounts a Samba share in /media/username/sharename
# Need cifs package installed on sistem
# (This function should not exist, because network mounts should live in /etc/fstab
# At least the password must be digited by the user)
# $1 : folder name
# $2 : remote host ip or path
function mount_samba_share(){
#TODO: verify cifs is working
  if [ -x "/sbin/mount.cifs" ]; then
    echo 'cifs OK'
  else
    echo 'cifs not found'
  fi

#TODO: verify remote host pingable
#TODO: verify destination folder name exists && is writeable
#TODO: verify remote share exists (is possible?)
  echo $SYSTEM_USERNAME
  sudo mount -t cifs -o username=$SYSTEM_USERNAME,password=$SYSTEM_PASSWORD //$2/$1 /media/$SYSTEM_USERNAME/$1
}

# I like to take loads of screenshots..
# $1 : frequency (default: 2 seconds)
# $2 : save path (.defaults needed also here, see above)
#
# Usage: screenshot_rain 2 /save/path
function screenshot_rain() {
	frequency=${1:=2}

	#in Gnome
	#save_path="/home/marco/Immagini/Schermata del `date +"%Y-%m-%d %r"`.png"
	#in Ubuntu
	#save_path="/media/marco/HOME0/Immagini/Schermata del `date +"%Y-%m-%d %r"`.png"
	save_path=${2:="$SYSTEM_IMAGES_FOLDER/$SCREENSHOT_NAME"}

	watch -n $frequency "import -window root '$save_path'"
}


function mysql_dump_db(){
  mysqldump -u$MYSQL_ROOT_USERNAME -p$MYSQL_ROOT_PASSWORD $1 > ./dump-$1-`date +"%Y-%m-%d_%r"`.sql
}

function mysql_drop_db() {
  mysql -u$MYSQL_ROOT_USERNAME -p$MYSQL_ROOT_PASSWORD -e"DROP DATABASE $1"
}

function mysql_restore_db(){
  mysql -u$MYSQL_ROOT_USERNAME -p$MYSQL_ROOT_PASSWORD $1 < $2
}

function mysql_dump_structure() {
  mysqldump -Qc $@
}


#!/bin/sh
#
# Script per la creazione di un file VirtualHost
# author: Marco Bianco - Alura snc
#
make_apache_virtual_host_help()
{
echo "Usage: `basename $0` -d percorso_document_root -s server_name [-o options]"
}

function make_apache_virtual_host() {
  A2ENSITE=/usr/sbin/a2ensite
  A2RELOAD="service apache2 reload"

  SITES_AVAILABLE_DIR="/etc/apache2/sites-available"
  ETC_HOSTS="/etc/hosts"

  DOCUMENT_ROOT=""
  SERVER_NAME=""
  OPTIONS="Indexes FollowSymLinks MultiViews"

  if [ $# -lt 4 ]; then
  usage
  exit
  fi

  while getopts ":d:s:o:" Option
  do
    case $Option in
      d )
  	if [ -d $OPTARG ]; then
  		DOCUMENT_ROOT="$OPTARG"
  	else
  		echo "DocumentRoot non valida. Esco."
  		make_apache_virtual_host_help
  		exit
  	fi;;
      s )
  	SERVER_NAME="$OPTARG";;
      o )
  	OPTIONS="$OPTARG";;
    esac
  done
  shift $(($OPTIND - 1))

  if [ "$DOCUMENT_ROOT" = "" ]; then
  	echo "DocumentRoot non puo' essere vuota. Esco"
  	make_apache_virtual_host_help
  	exit
  fi

  if [ "$SERVER_NAME" = "" ]; then
  	echo "ServerName non puo' essere vuota. Esco"
  	make_apache_virtual_host_help
  	exit
  fi

  echo "<VirtualHost *:80>
  	ServerAdmin webmaster@localhost
  	ServerName $SERVER_NAME
  	DocumentRoot $DOCUMENT_ROOT

  	<Directory $DOCUMENT_ROOT>
  		Options $OPTIONS
  		AllowOverride All
  		Order allow,deny
  		allow from all
  	</Directory>

  	ErrorLog /var/log/apache2/$SERVER_NAME-error.log
  	CustomLog /var/log/apache2/$SERVER_NAME-access.log combined

  	LogLevel warn
  </VirtualHost>" > "$SITES_AVAILABLE_DIR/$SERVER_NAME.conf"
  echo "VirtualHost creato in $SITES_AVAILABLE_DIR/$SERVER_NAME.conf"

  echo "Abilito il nuovo VirtualHost"
  $A2ENSITE $SERVER_NAME

  echo "Reload Apache"
  $A2RELOAD

  echo "Scrivo $ETC_HOSTS"
  echo "127.0.0.1 $SERVER_NAME" >> $ETC_HOSTS
  echo "OK"

  echo "Fine."
}
# need alias of the functions above? uncomment below

#alias mf='move_files $1 $2 $3'
#alias transfer='mount_network $1 $2 $3 $4;move_files $5 $6 $7'
#alias sync_folders='rsync_folders $1 $2'
#alias wget_loop='loop $1 $2 $3'
#alias mount_network='mount_network_folder $1 $2 $3 $4'
#alias screenshot_rain='take_multiple_screenshots $1 $2'
#alias mysql_drop='mysql_drop_db $1'
#alias mysql_restore='mysql_restore_db $1 $2'
#alias mysql_dump='mysql_dump_db $1'
#alias mysql_dump_structure='mysql_dump_db_structure $@'
